version: "3.8"

networks:
  traefik_net:
    external: true
    name: vcc_traefik_net
  postgres_net:

services:

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: vccadmin
      POSTGRES_PASSWORD: vccpassword
    volumes:
      - /data/postgres:/var/lib/postgresql/data
      - /data/configs/postgres/initdb:/docker-entrypoint-initdb.d
    networks:
      - postgres_net
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vccadmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  traefik:
    image: public.ecr.aws/docker/library/traefik:v3.2.2
    networks: [ traefik_net ]
    command:
      - --accesslog=true
      - --accesslog.format=json
      - --log.level=DEBUG
      - --log.format=json
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --entryPoints.metrics.address=:8082
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --providers.swarm.exposedByDefault=false
      - --metrics.prometheus=true
      - --metrics.prometheus.entryPoint=metrics
      - --api.insecure=true
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    deploy:
      placement:
        constraints:
          - node.role == manager
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/certs/traefik:/certs
      - /data/configs/traefik:/etc/traefik/dynamic

  dex:
    image: ghcr.io/dexidp/dex:v2.41.1-alpine
    user: root
    volumes:
      - /data/dex:/data
      - /data/configs/dex/dex.yaml:/etc/dex/config.docker.yaml:ro
    networks:
      traefik_net:
        aliases:
          - auth.vcc.internal
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=vcc_traefik_net"
        - "traefik.http.routers.dex.rule=Host(`auth.vcc.internal`)"
        - "traefik.http.routers.dex.service=dex"
        - "traefik.http.services.dex.loadbalancer.server.port=5556"

  forgejo:
    image: registry.vcc.internal:5000/forgejo:latest
    networks:
      traefik_net:
        aliases:
          - git.vcc.internal
      postgres_net:
    volumes:
      - /data/forgejo:/data
      - /data/configs/forgejo/forgejo.ini:/data/gitea/conf/app.ini:ro
      - /data/certs/traefik:/usr/local/share/ca-certificates:ro
      - /data/configs/forgejo/wait-for-postgres.sh:/wait-for-postgres.sh:ro
    command: ["/bin/sh", "-c", "/wait-for-postgres.sh postgres /usr/bin/forgejo web"]
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=vcc_traefik_net"
        - "traefik.http.routers.forgejo.rule=Host(`git.vcc.internal`)"
        - "traefik.http.routers.forgejo.service=forgejo"
        - "traefik.http.services.forgejo.loadbalancer.server.port=3000"
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
        window: 60s
    depends_on:
      - postgres

  grafana:
    image: docker.io/grafana/grafana:11.4.0
    networks:
      traefik_net:
        aliases:
          - grafana.vcc.internal
      postgres_net:
    volumes:
      - /data/grafana:/var/lib/grafana
    environment:
      - GF_AUTH_GENERIC_OAUTH_NAME=Dex
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=grafana-secret
      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid email profile
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://auth.vcc.internal/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://auth.vcc.internal/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=https://auth.vcc.internal/userinfo
      - GF_AUTH_SIGNOUT_REDIRECT_URL=https://auth.vcc.internal/logout
      - GF_SERVER_ROOT_URL=https://grafana.vcc.internal/
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=vcc_traefik_net"
        - "traefik.http.routers.grafana.rule=Host(`grafana.vcc.internal`)"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  prometheus:
    image: quay.io/prometheus/prometheus:v3.0.1
    networks:
      traefik_net:
        aliases:
          - prometheus.vcc.internal
    volumes:
      - /data/configs/prometheus/prometheus.yml:/prometheus/prometheus.yml:ro
      - /data/prometheus:/prometheus/data
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=vcc_traefik_net"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.vcc.internal`)"
        - "traefik.http.routers.prometheus.service=prometheus"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
